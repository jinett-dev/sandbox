{"version":3,"file":"visual.js","mappings":"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AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO,qBAAqB,yDAAS;AACrC;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,gCAAgC,2DAAW;AAClD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO,uBAAuB,yDAAS;AACvC;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACO,+BAA+B,2DAAW;AACjD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO,0BAA0B,8DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,8DAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACO,4BAA4B,2DAAW;AAC9C;AACA;;;;;;;;;;;AC9SO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrCA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,6CAA6C,GAAkB;IAC/D,IAAI,EAAE,+CAA+C;IACrD,WAAW,EAAE,SAAS;IACtB,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAiC,EAAE,EAAE;QAC1C,IAAI,wDAAM,EAAE;YACR,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;SAC9B;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;QACjD,IAAI,QAAQ,IAAI,cAAc,EAAE;YAC5B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;SACvD;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,+CAA+C,CAAC,GAAG,6CAA6C,CAAC;CAC5H;AACD,iEAAe,6CAA6C,EAAC","sources":["webpack:///./src/settings.ts","webpack:///./src/visual.ts","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///external var \"Function('return this')()\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\"use strict\";\nimport powerbi from \"powerbi-visuals-api\";\nimport { dataViewWildcard } from \"powerbi-visuals-utils-dataviewutils\";\nimport { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\nimport { BarChartDataPoint, StatusColor } from \"./visual\";\n\nimport FormattingSettingsCard = formattingSettings.Card;\nimport FormattingSettingsSlice = formattingSettings.Slice;\nimport FormattingSettingsModel = formattingSettings.Model;\n\n/**\n * Data Point Formatting Card\n */\n class EnableAxisCardSettings extends FormattingSettingsCard {\n    // Formatting property `show` toggle switch (formatting simple slice)\n    show = new formattingSettings.ToggleSwitch({\n        name: \"show\",\n        displayName: undefined,\n        value: false,\n        topLevelToggle: true\n    });\n\n    // Formatting property `fill` color picker (formatting simple slice)\n    fill = new formattingSettings.ColorPicker({\n        name: \"fill\",\n        displayName: \"Color\",\n        value: { value: \"#000000\" }\n    });\n\n    name: string = \"enableAxis\";\n    displayName: string = \"Enable Axis\";\n    slices: Array<FormattingSettingsSlice> = [this.show, this.fill];\n}\n\nclass ColorSelectorCardSettings extends FormattingSettingsCard {\n    name: string = \"colorSelector\";\n    displayName: string = \"Status Colors\";\n  \n    // slices will be populated in barChart settings model `populateColorSelector` method\n    slices: Array<FormattingSettingsSlice> = [];\n  }\n\n/**\n* visual settings model class\n*\n*/\nexport class VisualFormattingSettingsModel extends FormattingSettingsModel {\n    // Create formatting settings model formatting cards\n    enableAxis  = new EnableAxisCardSettings();\n    colorSelector = new ColorSelectorCardSettings();\n\n    cards = [this.enableAxis, this.colorSelector];\n\n    /**\n   * populate colorSelector object categories formatting properties\n   * @param dataPoints \n   */\n     populateColorSelector(dataPoints: StatusColor[]) {\n        let slices = this.colorSelector.slices;\n        if (dataPoints) {\n            dataPoints.forEach(dataPoint => {\n                slices.push(new formattingSettings.ColorPicker({\n                    name: \"fill\",\n                    displayName: dataPoint.name,\n                    value: { value: dataPoint.color },\n                    selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),\n                    altConstantSelector: dataPoint.selectionId.getSelector(),\n                    instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule\n                }));\n            });\n        }\n    }\n}\n","/*\n*  Power BI Visual CLI\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n\"use strict\";\n\nimport {\n    scaleBand, scaleLinear\n} from \"d3-scale\";\nimport {\n    select as d3Select\n} from \"d3-selection\";\n\nimport { axisBottom } from \"d3-axis\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\nimport \"./../style/visual.less\";\n\nimport DataViewCategoryColumn = powerbi.DataViewCategoryColumn;\nimport DataViewObjects = powerbi.DataViewObjects;\nimport DataView = powerbi.DataView;\nimport Fill = powerbi.Fill;\nimport ISandboxExtendedColorPalette = powerbi.extensibility.ISandboxExtendedColorPalette;\nimport ISelectionId = powerbi.visuals.ISelectionId;\nimport IselectionManager = powerbi.extensibility.ISelectionManager;\nimport IVisual = powerbi.extensibility.IVisual;\nimport IVisualHost = powerbi.extensibility.visual.IVisualHost;\nimport PrimitiveValue = powerbi.PrimitiveValue;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\n\nimport { VisualFormattingSettingsModel } from \"./settings\";\n\ntype Selection<T1, T2 = T1> = d3.Selection<any, T1, any, T2>;\n\nexport class StatusColor {\n    name: string;\n    color: string;\n    selectionId?: ISelectionId;\n}\n\nexport interface BarChartDataPoint {\n    value: PrimitiveValue;\n    category: string;\n    status: string;\n    color: string;\n    selectionId: ISelectionId;\n}\n\nexport class Visual implements IVisual {\n    private svg: Selection<any>;\n    private target: HTMLElement;\n    private host: IVisualHost;\n    private barContainer: Selection<SVGElement>;\n    private xAxis: Selection<SVGElement>;\n    private updateCount: number;\n    private textNode: Text;\n    private dataView: DataView;\n    private viewModel: BarChartDataPoint[];\n    private selectionManager: IselectionManager;\n    private formattingSettings: VisualFormattingSettingsModel;\n    private formattingSettingsService: FormattingSettingsService;\n    private globalStatusColor: StatusColor[];\n\n    static Config = {\n        xScalePadding: 0.1,\n        solidOpacity: 1,\n        transparentOpacity: 1,\n        margins: {\n            top: 0,\n            right: 0,\n            bottom: 25,\n            left: 30,\n        },\n        xAxisFontMultiplier: 0.04,\n    };\n\n    constructor(options: VisualConstructorOptions) {\n        this.target = options.element;\n        this.host = options.host;\n        this.formattingSettingsService = new FormattingSettingsService();\n        this.updateCount = 0;\n        this.globalStatusColor = [];\n        if (document) {\n            const new_p: HTMLElement = document.createElement(\"p\");\n            new_p.appendChild(document.createTextNode(\"Update count:\"));\n            const new_em: HTMLElement = document.createElement(\"em\");\n            this.textNode = document.createTextNode(this.updateCount.toString());\n            new_em.appendChild(this.textNode);\n            new_p.appendChild(new_em);\n            this.target.appendChild(new_p);\n        }\n    }\n\n    public update(options: VisualUpdateOptions) {\n        this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);\n\n        this.dataView = options.dataViews[0];\n        this.viewModel = this.visualTransform(options, this.host);\n\n        const new_table: HTMLTableElement = document.createElement(\"table\");\n        const table_header = document.createElement(\"thead\");\n        let td = document.createElement(\"td\");\n        td.appendChild(document.createTextNode(\"Category\"));\n        table_header.appendChild(td);\n        td = document.createElement(\"td\");\n        td.appendChild(document.createTextNode(\"Value\"));\n        table_header.appendChild(td);\n        td = document.createElement(\"td\");\n        td.appendChild(document.createTextNode(\"Status\"));\n        table_header.appendChild(td);\n        td = document.createElement(\"td\");\n        td.appendChild(document.createTextNode(\"color\"));\n        table_header.appendChild(td);\n        td = document.createElement(\"td\");\n        td.appendChild(document.createTextNode(\"SelectionID\"));\n        table_header.appendChild(td);\n        new_table.appendChild(table_header);\n        this.viewModel.forEach(value => {\n            let table_row = document.createElement(\"tr\");\n            td = document.createElement(\"td\");\n            td.appendChild(document.createTextNode(value.category));\n            table_row.appendChild(td);\n            td = document.createElement(\"td\");\n            td.appendChild(document.createTextNode(value.value as string));\n            table_row.appendChild(td);\n            td = document.createElement(\"td\");\n            td.appendChild(document.createTextNode(value.status));\n            table_row.appendChild(td);\n            td = document.createElement(\"td\");\n            td.setAttribute(\"style\", \"color:\" + value.color);\n            td.appendChild(document.createTextNode(value.color));\n            table_row.appendChild(td);\n            td = document.createElement(\"td\");\n            td.appendChild(document.createTextNode(value.selectionId.getKey()));\n            table_row.appendChild(td);\n            new_table.appendChild(table_row);\n        });\n        this.target.appendChild(new_table);\n    }\n\n    /**\n     * Returns properties pane formatting model content hierarchies, properties and latest formatting values, Then populate properties pane.\n     * This method is called once every time we open properties pane or when the user edit any format property. \n     */\n    public getFormattingModel(): powerbi.visuals.FormattingModel {\n        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\n    }\n\n    private visualTransform(options: VisualUpdateOptions, host: IVisualHost): BarChartDataPoint[] {\n        let barChartDataPoints: BarChartDataPoint[] = []\n        this.target.innerHTML = \"\";\n\n        let viewModel: BarChartDataPoint = {\n            value: null,\n            category: \"\",\n            status: \"\",\n            color: \"\",\n            selectionId: null,\n        };\n\n        if (!this.dataView ||\n            !this.dataView.categorical ||\n            !this.dataView.categorical.categories[0] ||\n            !this.dataView.categorical.values[0]\n        ) {\n            return barChartDataPoints;\n        }\n\n        let metadata = this.dataView.metadata;\n        let categorical = this.dataView.categorical;\n        let category = categorical.categories[0];\n        let values = categorical.values;\n\n        let statusList: StatusColor[] = [];    \n    \n        let colorPalette: ISandboxExtendedColorPalette = host.colorPalette;\n    \n        for (let i = 0; i < category.values.length; i++) {\n            let color: string = \"\";\n            let dataValue: string = \"\";\n            let selectionId: ISelectionId;\n            let selectionIDMeasureQuery: string;\n            let status: PrimitiveValue;\n            \n            for ( let j = 0; j < values.length; j++  ) {\n                let value = values[j];\n\n                if (value.source.roles.measure)\n                    dataValue = value.values[i] as string;\n\n                if (value.source.roles.status)\n                {\n                    status = value.values[i] as string;\n                    selectionIDMeasureQuery = value.source.queryName;\n                    let statusFound = this.globalStatusColor.find(element => {return element.name == status});\n                    let statusFoundIndex = this.globalStatusColor.indexOf(statusFound);\n                    selectionId = this.host.createSelectionIdBuilder()\n                                    .withCategory(category, i)\n                                    .withMeasure(selectionIDMeasureQuery)\n                                    .createSelectionId();\n                    if (value.objects && value.objects[i] != null)\n                    {\n                        let object = value.objects[i];\n                        color = this.getColumnColorByObject(object, colorPalette, \n                            colorPalette.getColor(status).value);\n                        if (statusFoundIndex >= 0) {\n                            this.globalStatusColor[statusFoundIndex].color = color;\n                        }\n                        else\n                        {\n                            this.globalStatusColor.push({\n                                name: status,\n                                color: color,\n                                selectionId: null\n                            });\n                        }\n                    }\n                    else \n                    {\n                        if (statusFoundIndex >= 0) {\n                            color = this.globalStatusColor[statusFoundIndex].color;\n                        }\n                        else\n                        {\n                            color = this.getColumnColorByIndex(category, i, colorPalette.getColor(status).value);\n                            this.globalStatusColor.push({\n                                name: status,\n                                color: color,\n                                selectionId: null\n                            });\n                        }\n                    }\n                    \n                    let statusFind = statusList.find(element => {return element.name == status});\n                    if (!statusList.includes(statusFind))\n                    statusList.push({\n                        name: status,\n                        color: color,\n                        selectionId: selectionId\n                    });\n                }    \n            }\n\n            if (selectionIDMeasureQuery == null)\n            {\n                selectionId = this.host.createSelectionIdBuilder()\n                                .withCategory(category, i)\n                                .createSelectionId();\n            }\n\n            let dataPoint: BarChartDataPoint = {\n                color: color,\n                selectionId: selectionId,\n                status: status as string,\n                value: dataValue,\n                category: `${category.values[i]}`,\n            }\n\n            barChartDataPoints.push(dataPoint);\n        }\n\n        this.formattingSettings.populateColorSelector(statusList)\n    \n        return barChartDataPoints;\n    }\n\n    /**\n * Gets property value for a particular object in a category.\n *\n * @function\n * @param {DataViewCategoryColumn} category - List of category objects.\n * @param {number} index                    - Index of category object.\n * @param {string} objectName               - Name of desired object.\n * @param {string} propertyName             - Name of desired property.\n * @param {T} defaultValue                  - Default value of desired property.\n */\nprivate getCategoricalObjectValue<T>(category: DataViewCategoryColumn, index: number, objectName: string, propertyName: string, defaultValue: T): T {\n    let categoryObjects = category.objects;\n\n    if (categoryObjects) {\n        let categoryObject: powerbi.DataViewObject = categoryObjects[index];\n        if (categoryObject) {\n            let object = categoryObject[objectName];\n            if (object) {\n                let property: T = <T>object[propertyName];\n                if (property !== undefined) {\n                    return property;\n                }\n            }\n        }\n    }\n    return defaultValue;\n}\n\n    /**\n     * Gets property value for a particular object in a category.\n     *\n     * @function\n     * @param {DataViewCategoryColumn} category - List of category objects.\n     * @param {number} index                    - Index of category object.\n     * @param {string} objectName               - Name of desired object.\n     * @param {string} propertyName             - Name of desired property.\n     * @param {T} defaultValue                  - Default value of desired property.\n     */\n     private getValue<T>(objects: powerbi.DataViewObjects, objectName: string, propertyName: string, defaultValue: T): T {\n        if (objects) {\n            let object = objects[objectName];\n            if (object) {\n                let property: T = <T>object[propertyName];\n                if (property !== undefined) {\n                    return property;\n                }\n            }\n        }\n        return defaultValue;\n    }\n\n    private getColumnColorByIndex(\n        category: DataViewCategoryColumn,\n        index: number,\n        defaultColor: string\n    ): string {\n    \n        return this.getCategoricalObjectValue<Fill>(\n            category,\n            index,\n            'colorSelector',\n            'fill',\n            {\n                solid: {\n                    color: defaultColor,\n                }\n            }\n        ).solid.color;\n    }\n\n    private getColumnColorByObject(\n        objects: powerbi.DataViewObjects,\n        colorPalette: ISandboxExtendedColorPalette,\n        defaultColor: string\n    ): string {\n        if (colorPalette.isHighContrast) {\n            return colorPalette.background.value;\n        }\n\n        return this.getValue<Fill>(\n            objects,\n            'colorSelector',\n            'fill',\n            {\n                solid: {\n                    color: defaultColor,\n                }\n            }\n        ).solid.color;\n    }\n}","/*\r\n*  Power BI Visualizations\r\n*\r\n*  Copyright (c) Microsoft Corporation\r\n*  All rights reserved.\r\n*  MIT License\r\n*\r\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n*  in the Software without restriction, including without limitation the rights\r\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n*  copies of the Software, and to permit persons to whom the Software is\r\n*  furnished to do so, subject to the following conditions:\r\n*\r\n*  The above copyright notice and this permission notice shall be included in\r\n*  all copies or substantial portions of the Software.\r\n*\r\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n*  THE SOFTWARE.\r\n*/\r\nexport function createDataViewWildcardSelector(dataViewWildcardMatchingOption) {\r\n    if (dataViewWildcardMatchingOption == null) {\r\n        dataViewWildcardMatchingOption = 0 /* InstancesAndTotals */;\r\n    }\r\n    let selector = {\r\n        data: [\r\n            {\r\n                dataViewWildcard: {\r\n                    matchingOption: dataViewWildcardMatchingOption\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    return selector;\r\n}\r\n//# sourceMappingURL=dataViewWildcard.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class Model {\n}\nexport class Card extends NamedEntity {\n    getFormattingCard(objectName, group, localizationManager) {\n        return {\n            displayName: (localizationManager && this.displayNameKey)\n                ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey)\n                ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            groups: [group],\n            uid: objectName,\n            analyticsPane: this.analyticsPane\n        };\n    }\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        let newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: this.displayName,\n            description: this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","export class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataViews) {\n        var _a, _b, _c;\n        let defaultSettings = new typeClass();\n        let dataViewObjects = (_b = (_a = dataViews === null || dataViews === void 0 ? void 0 : dataViews[0]) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_c = defaultSettings.cards) === null || _c === void 0 ? void 0 : _c.forEach((card) => {\n                var _a, _b, _c;\n                (_a = card === null || card === void 0 ? void 0 : card.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                    slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                });\n                (_c = (_b = card === null || card === void 0 ? void 0 : card.container) === null || _b === void 0 ? void 0 : _b.containerItems) === null || _c === void 0 ? void 0 : _c.forEach((containerItem) => {\n                    var _a;\n                    (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        var _a;\n        let formattingModel = {\n            cards: []\n        };\n        (_a = formattingSettingsModel.cards) === null || _a === void 0 ? void 0 : _a.forEach((card) => {\n            if (!card)\n                return;\n            const objectName = card.name;\n            const groupUid = card.name + \"-group\";\n            let formattingGroup = {\n                displayName: undefined,\n                slices: [],\n                uid: groupUid\n            };\n            let formattingCard = card.getFormattingCard(objectName, formattingGroup, this.localizationManager);\n            formattingModel.cards.push(formattingCard);\n            // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n            // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n            // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n            const sliceNames = {};\n            // Build formatting container slice for each property\n            if (card.container) {\n                const container = card.container;\n                const containerUid = groupUid + \"-container\";\n                const formattingContainer = {\n                    displayName: (this.localizationManager && container.displayNameKey)\n                        ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                    description: (this.localizationManager && container.descriptionKey)\n                        ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                    containerItems: [],\n                    uid: containerUid\n                };\n                container.containerItems.forEach((containerItem) => {\n                    // Build formatting container item object\n                    const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                    const containerItemUid = containerUid + containerIemName;\n                    let formattingContainerItem = {\n                        displayName: (this.localizationManager && containerItem.displayNameKey)\n                            ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                        slices: [],\n                        uid: containerItemUid\n                    };\n                    // Build formatting slices and add them to current formatting container item\n                    this.buildFormattingSlices(containerItem.slices, objectName, sliceNames, formattingCard, formattingContainerItem.slices);\n                    formattingContainer.containerItems.push(formattingContainerItem);\n                });\n                formattingGroup.container = formattingContainer;\n            }\n            if (card.slices) {\n                // Build formatting slice for each property\n                this.buildFormattingSlices(card.slices, objectName, sliceNames, formattingCard, formattingGroup.slices);\n            }\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices(slices, objectName, sliceNames, formattingCard, formattingSlices) {\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            let formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                // Set as topLevelToggle if topLevelToggle boolean was set to true\n                if (slice.topLevelToggle) {\n                    formattingSlice.suppressDisplayName = true;\n                    formattingCard.topLevelToggle = formattingSlice;\n                }\n                else {\n                    formattingSlices.push(formattingSlice);\n                }\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a, _b;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        let revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, card.slices, sliceNames);\n        let cardContainerSlicesDefaultDescriptors = [];\n        (_b = (_a = card.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n            cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n        });\n        revertToDefaultDescriptors = cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors);\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames) {\n        let revertToDefaultDescriptors = [];\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if (slice === null || slice === void 0 ? void 0 : slice.items) {\n        let itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","module.exports = Function('return this')();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar sandboxC839D4652AE8497B8F89CE540B23B914_DEBUG: IVisualPlugin = {\n    name: 'sandboxC839D4652AE8497B8F89CE540B23B914_DEBUG',\n    displayName: 'sandbox',\n    class: 'Visual',\n    apiVersion: '5.2.0',\n    create: (options: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"sandboxC839D4652AE8497B8F89CE540B23B914_DEBUG\"] = sandboxC839D4652AE8497B8F89CE540B23B914_DEBUG;\n}\nexport default sandboxC839D4652AE8497B8F89CE540B23B914_DEBUG;"],"names":[],"sourceRoot":""}